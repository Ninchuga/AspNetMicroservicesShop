version: v1.1.0
#workingDirectory: ./Src -> this is how we can set working directory, than we can set docker build context to be just dot (.)
steps:
# Build target image
# The image targets the Run.Registry, the registry where the task is run, and is tagged with a unique ACR Tasks run ID.
# Last argument ./Src in build step is the docker build context
- build: -t $Registry/web.razor:$ID -f ./Clients/Shopping.Razor/Dockerfile ./Src
  id: build web.razor image
  #workingDirectory: ./Src -> this is how we can set working directory, than we can set docker build context to be just dot (.)
- push:
  #- {{.Run.Registry}}/web.razor:{{.Run.ID}}
  - $Registry/web.razor:$ID
  
# Run image in a temporary container. This example starts a long-running container in the background and returns the container ID, then stops the container. 
# In a real-world scenario, you might include steps to test the running container to ensure it runs correctly.
- cmd: -t $Registry/web.razor:$ID
  id: test
  disableWorkingDirectoryOverride: true
  detach: true
  #entrypoint: 
  ports: ["8080:80"]
  #env: ["host=helloworld:80"]
- cmd: docker stop test
# Push image pushes the image that was built to the run registry
