{
  "Routes": [
    //Catalog API
    {
      "DownstreamPathTemplate": "/api/v1/Catalog",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5000"
        }
      ],
      "UpstreamPathTemplate": "/Catalog/api",
      "UpstreamHttpMethod": [ "GET", "POST", "PUT" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "catalogapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "FileCacheOptions": { "TtlSeconds": 30 },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
    },
    {
      "DownstreamPathTemplate": "/api/v1/Catalog/{id}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5000"
        }
      ],
      "UpstreamPathTemplate": "/Catalog/api/{id}",
      "UpstreamHttpMethod": [ "GET", "DELETE" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "catalogapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
    },
    {
      "DownstreamPathTemplate": "/api/v1/Catalog/GetProductByCategory/{category}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5000"
        }
      ],
      "UpstreamPathTemplate": "/Catalog/api/GetProductByCategory/{category}",
      "UpstreamHttpMethod": [ "GET" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "catalogapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
    },
    //Basket API
    {
      "DownstreamPathTemplate": "/api/v1/Basket/{userId}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5001"
        }
      ],
      "UpstreamPathTemplate": "/Basket/api/{userId}",
      "UpstreamHttpMethod": [ "GET" ],
      "AuthenticationOptions": { // authenticatiin key that Ocelot takes when firing a request to a route. If there is no key associated Ocelot will not start up
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "basketapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
      // we don't need to pass this anymore because user info can be extracted from the incoming scope in the services
      //"AddHeadersToRequest": { // custom header that finds authenticated user sub claim value and pass it to downstream services
      //  "CurrentUser": "Claims[sub] > value"
      //}
    },
    {
      "DownstreamPathTemplate": "/api/v1/Basket/DeleteBasketItem/{itemId}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5001"
        }
      ],
      "UpstreamPathTemplate": "/Basket/api/DeleteBasketItem/{itemId}",
      "UpstreamHttpMethod": [ "DELETE" ],
      "AuthenticationOptions": { // authenticatiin key that Ocelot takes when firing a request to a route. If there is no key associated Ocelot will not start up
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "basketapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
      // we don't need to pass this anymore because user info can be extracted from the incoming scope in the services
      //"AddHeadersToRequest": { // custom header that finds authenticated user sub claim value and pass it to downstream services
      //  "CurrentUser": "Claims[sub] > value"
      //}
    },
    {
      "DownstreamPathTemplate": "/api/v1/Basket/Delete/{userId}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5001"
        }
      ],
      "UpstreamPathTemplate": "/Basket/api/Delete/{userId}",
      "UpstreamHttpMethod": [ "DELETE" ],
      "AuthenticationOptions": { // authenticatiin key that Ocelot takes when firing a request to a route. If there is no key associated Ocelot will not start up
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "basketapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
      // we don't need to pass this anymore because user info can be extracted from the incoming scope in the services
      //"AddHeadersToRequest": { // custom header that finds authenticated user sub claim value and pass it to downstream services
      //  "CurrentUser": "Claims[sub] > value"
      //}
    },
    {
      "DownstreamPathTemplate": "/api/v1/Basket/UpdateBasket",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5001"
        }
      ],
      "UpstreamPathTemplate": "/Basket/api/UpdateBasket",
      "UpstreamHttpMethod": [ "POST" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "basketapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
      // we don't need to pass this anymore because user info can be extracted from the incoming scope in the services
      //"AddHeadersToRequest": { // custom header that finds authenticated user sub claim value and pass it to downstream services
      //  "CurrentUser": "Claims[sub] > value"
      //}
    },
    {
      "DownstreamPathTemplate": "/api/v1/Basket/AddBasketItem",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5001"
        }
      ],
      "UpstreamPathTemplate": "/Basket/api/AddBasketItem",
      "UpstreamHttpMethod": [ "POST" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "basketapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
      // we don't need to pass this anymore because user info can be extracted from the incoming scope in the services
      //"AddHeadersToRequest": { // custom header that finds authenticated user sub claim value and pass it to downstream services
      //  "CurrentUser": "Claims[sub] > value"
      //}
    },
    //Order API
    {
      "DownstreamPathTemplate": "/api/v1/Order/GetOrders/{userId}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5004"
        }
      ],
      "UpstreamPathTemplate": "/Order/api/GetOrders/{userId}",
      "UpstreamHttpMethod": [ "GET" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "basketapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
    },
    {
      "DownstreamPathTemplate": "/api/v1/Order/GetOrder/{orderId}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5004"
        }
      ],
      "UpstreamPathTemplate": "/Order/api/GetOrder/{orderId}",
      "UpstreamHttpMethod": [ "GET" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "basketapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 10000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
    },
    {
      "DownstreamPathTemplate": "/api/v1/Order/PlaceOrder",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5004"
        }
      ],
      "UpstreamPathTemplate": "/Order/api/PlaceOrder",
      "UpstreamHttpMethod": [ "PUT" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "ShoppingGatewayAuthenticationScheme"
        //"AllowedScopes": [ "basketapi.fullaccess" ] // Ocelot checks for these scopes before sending the request to a microservice
      },
      "DelegatingHandlers": [ "TokenExchangeDelegatingHandler" ],
      "QoSOptions": { // Quality of Service options -> enable circuit breaker pattern with polly
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // means the circuit breaker will stay open for 10 second after it is tripped.
        "TimeoutValue": 50000 // means if a request takes more than 10 seconds it will automatically be timed out.
      }
    }
  ],
  "GlobalConfiguration": {
    "BaseUrl": "http://localhost:5006"
  },
  "IdentityProviderSettings": {
    "IdentityServiceUrl": "https://localhost:44318"
  },
  "DownstreamServicesTokenExhangeCacheKeys": {
    "BasketApi": "gatewayandaggregatortodownstreamtokenexchangeclient_basketapi",
    "CatalogApi": "gatewayandaggregatortodownstreamtokenexchangeclient_catalogapi",
    "OrderApi": "gatewayandaggregatortodownstreamtokenexchangeclient_orderapi"
  },
  "DownstreamServicesScopes": {
    "BasketApi": "basketapi.fullaccess",
    "CatalogApi": "catalogapi.fullaccess",
    "OrderApi": "orderapi.fullaccess"
  },
  "WebClientUrls": {
    "Angular": "http://localhost:4200"
  }
}
